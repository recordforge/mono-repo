
FROM debian:bookworm-slim

RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        ca-certificates \
        curl \
        gnupg \
        lsb-release \
        apt-transport-https \
        git \
        openssh-client \
        sudo \
        iproute2 \
        iputils-ping \
        socat \
        conntrack \
        bash-completion \
        uidmap \
        fuse-overlayfs \
        jq \
        wget \
        unzip \
        zsh \
        fonts-powerline \
        locales \
        make \
        direnv \
        && rm -rf /var/lib/apt/lists/*


RUN locale-gen en_US.UTF-8
ENV LANG=en_US.UTF-8 \
    LANGUAGE=en_US:en \
    LC_ALL=en_US.UTF-8

RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - \
    && apt-get install -y nodejs \
    && rm -rf /var/lib/apt/lists/*


RUN npm install -g @anthropic-ai/claude-code

RUN curl -fsSL https://get.docker.com | sh

RUN curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" \
    && install -m 0755 kubectl /usr/local/bin/kubectl \
    && rm kubectl
    

RUN curl -fsSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash


RUN ARCH=$(uname -m) && \
    if [ "$ARCH" = "x86_64" ]; then \
      URL="https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64"; \
    elif [ "$ARCH" = "aarch64" ] || [ "$ARCH" = "arm64" ]; then \
      URL="https://storage.googleapis.com/minikube/releases/latest/minikube-linux-arm64"; \
    else \
      echo "Unsupported architecture: $ARCH" && exit 1; \
    fi && \
    curl -LO $URL && \
    install minikube-linux-* /usr/local/bin/minikube && \
    rm minikube-linux-*



ARG USERNAME=vscode
ARG USER_UID=1000
ARG USER_GID=1000
RUN groupadd --gid $USER_GID $USERNAME \
    && useradd --uid $USER_UID --gid $USER_GID -m $USERNAME \
    && echo "$USERNAME ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers.d/$USERNAME \
    && chmod 0440 /etc/sudoers.d/$USERNAME \
    && usermod -aG docker $USERNAME

USER $USERNAME
RUN curl -Ls https://astral.sh/uv/install.sh | bash
ENV PATH="/home/vscode/.cargo/bin:${PATH}"

RUN for i in 1 2 3 4 5; do \
        echo "Attempt $i to install Oh My Zsh..." && \
        sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended && \
        break || \
        if [ $i -eq 5 ]; then \
            echo "Failed to install Oh My Zsh after 5 attempts, continuing without it"; \
            break; \
        fi; \
        echo "Retrying in 5 seconds..." && sleep 5; \
    done && \
    for i in 1 2 3; do \
        git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions && \
        git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting && \
        git clone https://github.com/zsh-users/zsh-completions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-completions && \
        git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/themes/powerlevel10k && \
        break || \
        if [ $i -eq 3 ]; then \
            echo "Failed to clone plugins after 3 attempts, continuing without them"; \
            break; \
        fi; \
        echo "Retrying plugin installation in 5 seconds..." && sleep 5; \
    done || true

COPY --chown=$USERNAME:$USERNAME .zshrc /home/$USERNAME/.zshrc
COPY --chown=$USERNAME:$USERNAME .p10k.zsh /home/$USERNAME/.p10k.zsh

WORKDIR /workspace

VOLUME ["/var/lib/docker"]
ENV DOCKER_HOST=unix:///var/run/docker.sock

CMD ["sh"]
